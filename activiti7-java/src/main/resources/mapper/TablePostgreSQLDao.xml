<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.activiti.modules.dao.TablePostgreSQLDao">
    <select id="tableList" resultType="com.activiti.modules.entity.TableInfo">
        select
        t1.tablename as table_name, obj_description(relfilenode, 'pg_class') as table_comment, now() as create_time
        from pg_tables t1, pg_class t2
        where t1.tablename not like 'pg%'
        and t1.tablename not like 'sql_%'
        and t1.tablename not like 'sys_%'
        and t1.tablename not like 'act_%'
        and t1.tablename = t2.relname
        <if test="tableName != null and tableName.trim() != ''">
            and t1.tablename like concat('%', #{tableName}::text, '%')
        </if>
        order by t1.tablename desc
    </select>

    <select id="tableColumns" resultType="com.activiti.modules.entity.TableColumns">
        select  * from (
            select
                t2.attname                                        as column_name,
                pg_type.typname                                   as data_type,
                col_description(t2.attrelid, t2.attnum)           as column_comment,
                (CASE t3.contype WHEN 'p' THEN 'PRI' ELSE '' END) as column_key
            from pg_class as t1,
            pg_attribute as t2
            inner join pg_type on pg_type.oid = t2.atttypid
            left join pg_constraint t3 on t2.attnum = t3.conkey[1] and t2.attrelid = t3.conrelid
            where t1.relname = #{tableName}
            and t2.attrelid = t1.oid
            and t2.attnum > 0
        ) t
        <where>
            <if test="columnKey != null and columnKey != ''">
                and column_key = #{columnKey}
            </if>
        </where>
    </select>

    <insert id="createTable">
        CREATE TABLE "${tableName}" (
            "${idName}" varchar(40) COLLATE "pg_catalog"."default" NOT NULL,
            <foreach item="item" index="index" collection="columns">
                "${item.columnName}" ${item.dataType}
                <if test="item.columnLength != -1">
                    (${item.columnLength})
                </if>,
            </foreach>
            CONSTRAINT ${tableName}_pkey PRIMARY KEY ("${idName}")
        );
        COMMENT ON COLUMN ${tableName}.${idName} IS '主键ID';
        <foreach item="item" index="index" collection="columns">
            COMMENT ON COLUMN ${tableName}.${item.columnName} IS '${item.columnComment}';
        </foreach>
        COMMENT ON TABLE ${tableName} IS '${tableComment}';
    </insert>

    <select id="exist" resultType="long">
        select count(1) from ${tableName}
        where ${idName} = #{idValue}
    </select>

    <insert id="insertData">
        insert into ${tableName}
        <foreach collection="listData.keys" item="name" open="(" close=")" separator=",">
            "${name}"
        </foreach>
        values
        <foreach collection="listData.values" item="value" open="(" close=")" separator=",">
            #{value}
        </foreach>
    </insert>

    <update id="updateDataById">
        update ${tableName} set
        <foreach collection="listData" index="key" item="value" separator=",">
            "${key}" = #{value}
        </foreach>
        where ${idName} = #{idValue}
    </update>
</mapper>